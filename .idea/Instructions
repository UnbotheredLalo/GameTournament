Vamos a crear una aplicación para gestionar un torneo de videojuegos. Cada jugador tiene un conjunto
de habilidades y un historial de victorias. Vamos a:

- Registrar jugadores. //
- Registrar sus habilidades (usando un Set). //
- Llevar un registro de los niveles en los que han competido y sus victorias (usando un Map). //
- Utilizar Streams para realizar consultas, como:
    - Obtener los jugadores que tienen una habilidad específica.
    - Obtener el total de victorias por jugador.
    - Agrupar los jugadores por la cantidad de habilidades que poseen.
    - Jugador es la clase principal que tiene un conjunto de habilidades (Set<String>) y un mapa para
      registrar el nivel y el número de victorias (Map<String, Integer>). //

Usamos Streams para:
- Filtrar los jugadores que tienen una habilidad específica.
- Crear un mapa con el total de victorias por jugador. //
- Agrupar jugadores por la cantidad de habilidades que poseen. ****

* En el main:

Aquí te dejo una versión extendida del ejercicio para gestionar un torneo de videojuegos,
incluyendo el manejo de Queue y Stack además de lo que ya tenías:

Descripción adicional:

Queue: Usaremos una Queue para manejar los jugadores en una fila de espera para competir en los niveles.
Stack: Usaremos un Stack para llevar un historial de las últimas acciones (como los últimos
niveles jugados). ***

Nuevas funcionalidades:
Queue: En este ejemplo, usamos una cola (Queue<Jugador>) para gestionar el orden en el que los jugadores
compiten. Los jugadores se encolan y luego se procesan uno por uno.
Stack: Se utiliza una pila (Stack<String>) para registrar el historial de niveles jugados por cada jugador.
 Esto permite consultar fácilmente los últimos niveles en los que ha competido.

De esta manera, ya tienes un ejercicio que cubre POO, colecciones como Set, List, Map, manejo de Queue,
Stack, y consultas con Streams.